{"version":3,"sources":["../src/main.ts","../src/run.ts","../src/utils/build-pnpm-workspace-tree.ts","../src/utils/package-json.ts","../src/utils/read-pnpm-workspace.ts"],"sourcesContent":["import \"source-map-support/register.js\";\n\nimport { resolve } from \"node:path\";\nimport * as core from \"@actions/core\";\nimport { run } from \"./run.js\";\n\nconst getString = (name: string) => {\n  const value = process.env[name];\n  if (!value) throw new Error(`Missing environment variable: ${name}`);\n  return value;\n};\nconst getBoolean = (name: string) => {\n  const value = getString(name);\n  if ([\"true\", \"1\"].includes(value)) return true;\n  if ([\"false\", \"0\"].includes(value)) return false;\n  return value.length > 0;\n};\n\nconst main = async (): Promise<void> => {\n  await run({\n    diff: getString(\"diff\")\n      .split(\" \")\n      .map((v) => resolve(v.replace(/^'|'$/g, \"\"))),\n    message: getString(\"message\"),\n    dryRun: getBoolean(\"dry_run\"),\n    pnpmWorkspace: getBoolean(\"pnpm_workspace\"),\n  });\n};\n\nmain().catch((e: Error) => {\n  core.setFailed(e);\n  console.error(e);\n});\n","import { readFile, writeFile } from \"node:fs/promises\";\nimport { join, resolve } from \"node:path\";\nimport * as core from \"@actions/core\";\nimport { match } from \"ts-pattern\";\nimport { buildPnpmWorkspaceTree } from \"./utils/build-pnpm-workspace-tree\";\nimport { packageJsonSchema } from \"./utils/package-json\";\nimport { readPnpmWorkspace } from \"./utils/read-pnpm-workspace\";\n\ntype Inputs = {\n  diff: string[];\n  message: string;\n  dryRun: boolean;\n  pnpmWorkspace: boolean;\n};\n\nexport const run = async (inputs: Inputs): Promise<void> => {\n  const packages = await match(inputs.pnpmWorkspace)\n    .with(true, async () => {\n      const workspaceYaml = await readPnpmWorkspace(\"pnpm-workspace.yaml\");\n      core.info(`workspaceYaml: ${workspaceYaml}`);\n      return await buildPnpmWorkspaceTree(workspaceYaml);\n    })\n    .with(false, async () => {\n      const pkg = packageJsonSchema.parse(\n        JSON.parse(await readFile(\"package.json\", \"utf-8\")),\n      );\n      return {\n        [pkg.name]: {\n          dependsOn: [],\n          dir: resolve(\".\"),\n          isPrivate: pkg.private,\n        },\n      };\n    })\n    .exhaustive();\n\n  const changedPackages = Object.entries(packages)\n    .filter(([_, { dir }]) => {\n      return inputs.diff.some((d) => d.startsWith(`${dir}/`));\n    })\n    .map(([name]) => name);\n  const affectedPackages = Object.entries(packages).filter(\n    ([name, { dependsOn, isPrivate }]) =>\n      changedPackages.some((cp) => cp === name || dependsOn.includes(cp)) &&\n      !isPrivate,\n  );\n\n  core.info(`diff: ${JSON.stringify(inputs.diff)}`);\n  core.info(`packages: ${packages}`);\n  core.info(`changedPackages: ${changedPackages}`);\n  core.info(`affectedPackages: ${affectedPackages}`);\n\n  if (affectedPackages.length === 0) {\n    core.info(\"no affected packages\");\n    return;\n  }\n  const filename = join(\n    \".changeset\",\n    `${inputs.message.replace(/\\s/g, \"-\").replace(/\\//g, \"_\").toLowerCase()}.md`,\n  );\n  const changeset = `---\n${affectedPackages.map(([name]) => `\"${name}\": patch`).join(\"\\n\")}\n---\n\n${inputs.message}`;\n\n  if (!inputs.dryRun) {\n    await writeFile(filename, changeset);\n  } else {\n    core.info(\"dry run\");\n    core.info(`write file â†’ ${filename}`);\n    core.info(\"=\".repeat(40));\n    core.info(changeset);\n    core.info(\"=\".repeat(40));\n  }\n};\n","import { readFile } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\nimport { glob } from \"glob\";\n\nimport { packageJsonSchema } from \"./package-json\";\nimport type { PnpmWorkspace } from \"./read-pnpm-workspace\";\n\nconst getAllDependencies = (\n  // this is cache\n  allDependencies: Record<string, string[]>,\n  packagesTree: Record<\n    string,\n    {\n      readonly dependsOn: readonly string[];\n    }\n  >,\n  packageName: string,\n): string[] => {\n  const pkg = packagesTree[packageName];\n  if (!pkg) throw new Error(`Package ${packageName} not found in workspace`);\n  if (allDependencies[packageName]) {\n    // return cache\n    return allDependencies[packageName] ?? [];\n  }\n  if (pkg.dependsOn.length === 0) {\n    allDependencies[packageName] = [];\n    return [];\n  }\n  // recursively get all dependencies\n  allDependencies[packageName] = Array.from(\n    new Set([\n      ...pkg.dependsOn,\n      ...pkg.dependsOn.flatMap((dep) =>\n        getAllDependencies(allDependencies, packagesTree, dep),\n      ),\n    ]),\n  );\n  return allDependencies[packageName] ?? [];\n};\n\nexport const buildPnpmWorkspaceTree = async (workspace: PnpmWorkspace) => {\n  const packages = await Promise.all(\n    workspace.packages.map(async (packagePath) => {\n      const files = await glob(`${packagePath}/package.json`);\n\n      return await Promise.all(\n        files.map(async (packageJsonPath) => {\n          const packageJson = packageJsonSchema.parse(\n            JSON.parse(await readFile(packageJsonPath, \"utf-8\")),\n          );\n\n          return {\n            dependencies: Object.fromEntries(\n              Object.entries(packageJson.dependencies).filter(([_, v]) =>\n                v.startsWith(\"workspace:\"),\n              ),\n            ),\n            devDependencies: Object.fromEntries(\n              Object.entries(packageJson.devDependencies).filter(([_, v]) =>\n                v.startsWith(\"workspace:\"),\n              ),\n            ),\n            isPrivate: packageJson.private,\n            name: packageJson.name,\n            path: packageJsonPath,\n          };\n        }),\n      );\n    }),\n  ).then((v) => v.flat());\n\n  const packagesTree = Object.fromEntries(\n    packages.map((pkg) => {\n      return [\n        pkg.name,\n        {\n          dependsOn: [\n            ...Object.keys(pkg.dependencies),\n            ...Object.keys(pkg.devDependencies),\n          ],\n          dir: resolve(pkg.path, \"..\"),\n          isPrivate: pkg.isPrivate,\n        },\n      ] as const;\n    }),\n  );\n\n  const allDependencies: Record<string, string[]> = {};\n\n  return Object.fromEntries(\n    Object.entries(packagesTree).map(([name, pkg]) => {\n      return [\n        name,\n        {\n          ...pkg,\n          dependsOn: getAllDependencies(allDependencies, packagesTree, name),\n        },\n      ] as const;\n    }),\n  );\n};\n","import { z } from \"zod\";\n\nexport const packageJsonSchema = z\n  .object({\n    dependencies: z.record(z.string()).default({}),\n    devDependencies: z.record(z.string()).default({}),\n    name: z.string(),\n    private: z.boolean().default(false),\n  })\n  .strip();\n","import { readFile } from \"node:fs/promises\";\nimport yaml from \"js-yaml\";\nimport { z } from \"zod\";\n\nconst workspaceSchema = z.object({\n  packages: z.array(z.string()),\n});\n\nexport type PnpmWorkspace = z.infer<typeof workspaceSchema>;\n\nexport const readPnpmWorkspace = async (workspaceFilePath: string) => {\n  return workspaceSchema.parse(\n    yaml.load(await readFile(workspaceFilePath, \"utf-8\")),\n  );\n};\n"],"mappings":"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","names":["resolve","core","readFile","resolve","readFile","z","readFile","resolve","resolve"]}